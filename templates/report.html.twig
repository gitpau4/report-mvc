{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Redovisning</h1>

    <article>
        <section id="kmom01">
        <h2>Kmom01</h2>
        <p>
            Tidigare har jag jobbat med objektorientering i dbwebb kursen oopython, och även en kurs i objektorienterad Java. 
            PHPs modell för klasser och objekt bygger på objektorienterad programmering. 
            Den objektorienterade modellen skapar en tydlig struktur och gör det lätt att få till DRY kod. 
            Man skapar klasser som är som en mall för objekt. 
            Ett objekt är en instans av en klass, och den kan ha medlemsvariabler (properties) och metoder. 
            Metoder visar allt som objektet kan göra, till exempel ändra läge för objektet eller utföra en uppgift.
        </p>
        <p>
            Jag uppfattar kodbasen till uppgiften som ganska stor med väldigt många filer, men väl strukturerade. 
            Det finns en tydlig uppdelning mellan routes, templates, bilder och styling till exempel. 
            Koden i sig känner man igen då vi jobbat med php, html och twig innan i tidigare kurser.
        </p>
        <p>
            I artikeln "PHP the right way" tycker jag att delen om säkerhet känns intressant och viktig. 
            Där skrivs det bland annat om "password hashing", vilket betyder att transformera lösenord till strängar med en hash funktion, som sedan inte går att transformera tillbaks till orginalet. 
            Detta skiljer sig från "encrypting" där man kan transformera tillbaks strängen med hjälp av en nyckel, och därför är just hashing det man ska använda för lösenord. 
            Det skrivs även om "data filtering" som innebär att man ska sanera och validera all input som kommer in utifrån, då man aldrig ska lita på sådan. 
            I en annan del av artikeln skrivs det om testing, bland annat unit testing, vilket är bra att kunna. 
            Det jobbade vi med i kursen oopython, och jag märkte då hur använbart det var, att enkelt kunna se om delar av koden fungerar som den ska.
        </p>
        <p>
            Mitt TIL för detta kmom är att göra en egen readme fil.
        </p>
        </section>

        <section id="kmom02">
            <h2>Kmom02</h2>
            <p>
                Arv används i php när en klass ärver attribut och metoder från en annan klass. 
                Den ärvande klassen kallas subklass och basklassen kallas superklass. 
                Man kan säga att subklassen utökar superklassen. 
                Komposition innebär att en klass refererar till en annan i sina attribut. 
                Man brukar kalla det för en <i>has-a</i> relation, alltså att <i>klass 1 har en klass2</i>. 
                Interface innebär att man specifierar vilka metoder en klass <b>ska</b> att implementera. 
                Trait liknar arv, alltså den innehåller attribut och metoder som andra klasser använder. 
                Skillnaden från arv är att klassen kan använda flera olika traits.
            </p>
            <p>
                Jag började med att skapa klasserna med metoder som jag tänkte skulle behövas. 
                Under arbetets gång fick jag justera klasserna så att de kunde lösa all funktionalitet som behövdes för uppgiften. 
                Jag skapade två olika controller klasser, en för twig och en för json. 
                Vissa twig templates använde jag till flera routes, tex deck och shuffle använder samma twig template, vilket gör koden lite mer dry. 
                Ett förbättringspotential jag ser är att jag just nu har en metod för att hämta data från sessionen som är likadan i båda controllers, 
                där skulle jag kanske kunna skapa en klass med metoden som de båda kan hämta metoden från. 
                Jag skulle även kunna göra knappen på api landningssidan för att dra flera kort mer flexibel, just nu är knappen hårdkodad på 5 st kort.
            </p>
            <p>
                Mina reflektioner över att jobba i Symfony är att det är ganska likt hur vi jobbade i oopython kursen. 
                I alla fall yahtzee i oopython och nu med kortleken, strukturen på filerna med templates och routes är ganska lik. 
                Det är en struktur jag börjat gilla, för det ger en uppdelning mellan logiken och presentationen.
            </p>
            <p>
                Mitt TIL för detta kmom är att man kan spara hela objekt i sessionen i php.
            </p>
            <p>
                Referenser:
                <ul>
                    <li><a href="https://www.w3schools.com/php/php_oop_what_is.asp">w3schools PHP - What is OOP?</a></li>
                    <li><a href="https://dbwebb.se/guide/kom-igang-med-objektorienterad-programmering-i-php">dbwebb Kom igång med Objektorienterad programmering i PHP</a></li>
                </ul>
            </p>
        </section>

        <section id="kmom03">
            <h2>Kmom03</h2>
            <p>
                Jag tyckte att det hjälpte mig att börja programmera när jag redan hade ett flödesdiagram och pseudokod. 
                Vanligtvis brukar jag börja koda ganska direkt och inte ha en väldigt genomtänkt plan. 
                För större projekt är det definitivt en fördel att ha en plan innan man börjar koda, för att få så bra kod och struktur som möjligt. 
                Jag tror även att det kan spara en del tid. 
                Innan jag började projektet trodde jag att jag skulle lägga ganska lite tid på förberedelsen med flödesdiagram och pseudokod, och mycket tid på själva kodandet. 
                Men det visade sig inte bli som jag tänkte, jag la mycket mer tid på förberedelsen än jag trodde, sen blev inte slutresultatet exakt enligt förberedelsen, men ganska likt. 
                Att komma igång med kodandet kändes lätt eftersom jag redan visste till stor del vad som skulle göras, så det kändes inte lika överväldigande att komma igång. 
            </p>
            <p>
                För att lösa uppgiften skapade jag två ytterligare klasser, Player och GameLogic, och använde de klasser som redan fanns från kmom02. 
                GameLogic har övergripande koll på spelets logik, och innehåller både spelare och kortlek. 
                Player klassen representerar en spelare eller bank, och den har inte direkt någon egen metod förutom två getters och en metod som hämtar från CardHand. 
                Därför var jag lite osäker på om den klassen var nödvändig eller om det räckte med bara CardHand. 
                Men jag tror ändå det var bra att jag behöll Player klassen, för det gör koden i GameLogic tydligare, och kan vara bra att ha om man utökar spelet. 
                Jag är ganska nöjd med resultatet, men spelet hade kunnat förbättras genom att göra några av de valfria kraven, om jag hade haft tid över. 
                Jag tycker jag fick till en ganska 'smal' controller fil med lite kod, men man hade kanske kunnat få till ännu mindre kod och ha fler metoder i klasserna. 
            </p>
            <p>
                Min känsla för att koda med ramverket Symfony är jag lär mig att uppskatta strukturen mellan logik och presentation med templates. 
                Jag tycker att Symfony gör det lite lättare att jobba med sessionen, då det finns bra inbyggda funktioner till sessionen. 
            </p>
            <p>
                Mitt TIL för detta kmom är hur man gör flödesdiagram.
            </p>
        </section>
    </article>
{% endblock %}